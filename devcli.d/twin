# vim: ft=sh sw=2 ts=2 expandtab
SUBCOMMAND_DESC="Utility for maintain copies of '${MAIN_COMMAND}'"
SUBCOMMAND_HELP=$(cat <<EOH

update NAME [-f]          Will copy all files in:
                          ${SUBCOMMANDS_DIR}
                          and
                          ${CONFIGURATION_DIR}
                          to the same directories defined for the twin
                          tool defined by NAME. Unless '-f' is given
                          this command won't overwrite any files.

create NAME DIR           This will create a twin (a copy of this tool)
                          which you can extend and change it.

status NAME               Check how files compare between this tool
                          and NAME tool.

EOH
)

function _check_env() {
    local name="${1}"
    # these variable will be global to this script
    local c_dir="${name^^}_CONF_DIR"
    local s_dir="${name^^}_SUBCMD_DIR"

    if [[ ! -d ${!c_dir} || ! -d ${!s_dir} ]]; then
      error "Env variables ${s_dir} and ${c_dir} must be defined.\n"
    fi

    log "Exporting CNF_DIR and SUB_DIR variables."
    local -g CNF_DIR="${!c_dir}"
    local -g SUB_DIR="${!s_dir}"
}

function _print_diff_result() {
  local file="${1}"
  local result="${2}"

  sep=$(printf ".%.0s" {1..25}) # large sequence of '.' for formatting

  printf "%s%s%s\n" "${file}" "${sep:${#f}}" "${result}"
}

function _check_diff_in_dir() {
  local source_dir="${1}"
  local target_dir="${2}"
  echo ${source_dir}
  local partial_source_dir=${source_dir%${target_dir}/}
  local partial_target_dir=${target_dir%${source_dir}/}

  while read line; do
    f=${line#${source_dir}/}
    diff --brief ${source_dir}/${f} ${target_dir}/${f} &> /dev/null \
      && _print_diff_result "${partial_source_dir}/${f} ${partial_target_dir}/${f}" "$(green_box 'SAME' )"  \
      || _print_diff_result "${f}" "$(yellow_box 'DIFF' )"

  done <<< $(find ${source_dir} -type f)
}

case ${1} in
  diff)
    twin_name="${2?'missing twin command NAME'}"
    _check_env "${twin_name}"

  ;;
  status)
    twin_name="${2?'missing twin command NAME'}"
    _check_env "${twin_name}"

    in_cyan "Checking configurations:\n"
    _check_diff_in_dir "${CONFIGURATION_DIR}" "${CNF_DIR}"

    in_cyan "\nChecking subcommands:\n"
    _check_diff_in_dir "${SUBCOMMANDS_DIR}"   "${SUB_DIR}"
  ;;
  update)
    twin_name="${2?'missing twin command NAME'}"
    _check_env "${twin_name}"

    in_cyan "Updating twin '${twin_name}' command files. \
      Use '-f' after NAME to force overwrite of files.\n"

    # do not force overwrite files by default
    [[ ${3:-""} == "-f" ]] && cp_flags="-Rv" || cp_flags="-nRv"

    in_cyan "Copying files into twin configuration directory\n"
    cp ${cp_flags} "${CONFIGURATION_DIR}/" "${!CNF_DIR}/"

    in_cyan "\nCopying files into twin subcommands directory\n"
    cp ${cp_flags} "${SUBCOMMANDS_DIR}/"   "${!SUB_DIR}/"
  ;;
  create)
    twin_name="${2?'missing twin command NAME parameter'}"
    twin_name="${twin_name,,}" # make it lowercase
    in_cyan "Creating '${twin_name}' as twin copy of this tool\n"

    twin_dir="${3?'missing twin command DIR parameter'}"
    [[ ! -d "${twin_dir}" ]] \
      && error "'${twin_dir}' must be a directory.\n"

    twin_project_dir="${twin_dir%/}/${twin_name}"
    log "project dir set as: ${twin_project_dir}"
    [[ -d "${twin_project_dir}" ]] \
      && error "${twin_project_dir} already exists, use 'twin update' instead\n"

    twin_subcmd_dir="${twin_project_dir}/${twin_name}.d"
    twin_config_dir="${twin_project_dir}/conf"
    log "subcmd dir set as: ${twin_subcmd_dir}"
    log "config dir set as: ${twin_config_dir}"

    in_cyan "Creating directory: ${twin_project_dir}\n"
    mkdir "${twin_project_dir}"
    in_cyan "Creating subcmd directory: ${twin_subcmd_dir}\n"
    mkdir "${twin_subcmd_dir}"
    in_cyan "Creating configuration directory: ${twin_config_dir}\n"
    mkdir "${twin_config_dir}"

    in_cyan "Creating symbolic link from '${MAIN_COMMAND}' to '${twin_name}'\n"
    ln -s "${ROOT_DIR}/${MAIN_COMMAND}" "${twin_project_dir}/${twin_name}"

    in_cyan "Exporting configuration environment variables for '${twin_name}'\n"
    export "${twin_name^^}_CONF_DIR=${twin_config_dir}"
    export "${twin_name^^}_SUBCMD_DIR=${twin_subcmd_dir}"

    in_cyan "Running update on '${twin_name}'\n"
    log "about to call: ${MAIN_COMMAND} ${SUBCOMMAND} update ${twin_name}"
    ${MAIN_COMMAND} ${SUBCOMMAND} update ${twin_name}

    in_green "${twin_name} setup finished.\n"
  ;;
esac
